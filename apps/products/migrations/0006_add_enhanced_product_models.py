# Generated by Django 5.2.6 on 2025-09-22 05:21

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        ('products', '0005_alter_product_design_templates'),
    ]

    operations = [
        # Add new fields to existing ProductCategory model
        migrations.AddField(
            model_name='productcategory',
            name='image',
            field=models.ImageField(blank=True, null=True, upload_to='categories/'),
        ),
        migrations.AddField(
            model_name='productcategory',
            name='featured',
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name='productcategory',
            name='default_bleed',
            field=models.DecimalField(decimal_places=2, default=3.0, help_text='Default bleed in mm', max_digits=5),
        ),
        migrations.AddField(
            model_name='productcategory',
            name='default_safe_zone',
            field=models.DecimalField(decimal_places=2, default=2.0, help_text='Default safe zone in mm', max_digits=5),
        ),
        migrations.AddField(
            model_name='productcategory',
            name='created_at',
            field=models.DateTimeField(auto_now_add=True, null=True),
        ),
        migrations.AddField(
            model_name='productcategory',
            name='updated_at',
            field=models.DateTimeField(auto_now=True, null=True),
        ),
        
        # Add new fields to existing Product model
        migrations.AddField(
            model_name='product',
            name='base_width',
            field=models.DecimalField(decimal_places=2, default=90, help_text='Base width in mm', max_digits=8),
        ),
        migrations.AddField(
            model_name='product',
            name='base_height',
            field=models.DecimalField(decimal_places=2, default=54, help_text='Base height in mm', max_digits=8),
        ),
        migrations.AddField(
            model_name='product',
            name='unit',
            field=models.CharField(choices=[('mm', 'MM'), ('in', 'Inches'), ('cm', 'CM')], default='mm', max_length=10),
        ),
        migrations.AddField(
            model_name='product',
            name='minimum_quantity',
            field=models.IntegerField(default=1),
        ),
        migrations.AddField(
            model_name='product',
            name='has_design_tool',
            field=models.BooleanField(default=True, help_text='Enable design tool for this product'),
        ),
        migrations.AddField(
            model_name='product',
            name='default_bleed',
            field=models.DecimalField(decimal_places=2, default=3.0, help_text='Default bleed in mm', max_digits=5),
        ),
        migrations.AddField(
            model_name='product',
            name='default_safe_zone',
            field=models.DecimalField(decimal_places=2, default=2.0, help_text='Default safe zone in mm', max_digits=5),
        ),
        migrations.AddField(
            model_name='product',
            name='accepted_file_formats',
            field=models.JSONField(default=list, help_text='Accepted file formats (PDF, PNG, JPG, etc.)'),
        ),
        migrations.AddField(
            model_name='product',
            name='max_file_size_mb',
            field=models.IntegerField(default=50, help_text='Maximum file size in MB'),
        ),
        migrations.AddField(
            model_name='product',
            name='min_resolution_dpi',
            field=models.IntegerField(default=300, help_text='Minimum resolution in DPI'),
        ),
        migrations.AddField(
            model_name='product',
            name='production_time_days',
            field=models.IntegerField(default=3, help_text='Standard production time'),
        ),
        migrations.AddField(
            model_name='product',
            name='rush_time_days',
            field=models.IntegerField(default=1, help_text='Rush production time'),
        ),
        migrations.AddField(
            model_name='product',
            name='rush_fee_percent',
            field=models.DecimalField(decimal_places=2, default=50, help_text='Rush fee as percentage', max_digits=5),
        ),
        migrations.AddField(
            model_name='product',
            name='new_product',
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name='product',
            name='on_sale',
            field=models.BooleanField(default=False),
        ),
        
        # Create new ProductOption model
        migrations.CreateModel(
            name='ProductOption',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('option_type', models.CharField(choices=[('paper', 'Paper Type'), ('finish', 'Finish'), ('binding', 'Binding'), ('color', 'Color Mode'), ('size', 'Size'), ('coating', 'Coating'), ('corners', 'Corner Style'), ('quantity', 'Quantity'), ('orientation', 'Orientation'), ('lamination', 'Lamination'), ('perforation', 'Perforation'), ('folding', 'Folding'), ('cutting', 'Cutting'), ('embossing', 'Embossing'), ('foiling', 'Foiling')], max_length=20)),
                ('description', models.TextField(blank=True)),
                ('is_required', models.BooleanField(default=True)),
                ('sort_order', models.IntegerField(default=0)),
                ('display_as_grid', models.BooleanField(default=False, help_text='Display as visual grid instead of dropdown')),
                ('show_images', models.BooleanField(default=False, help_text='Show images for option values')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='options', to='products.product')),
            ],
            options={
                'ordering': ['sort_order', 'name'],
            },
        ),
        
        # Create new OptionValue model
        migrations.CreateModel(
            name='OptionValue',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True)),
                ('price_modifier', models.DecimalField(decimal_places=2, default=0, help_text='Additional cost for this option', max_digits=8)),
                ('price_modifier_type', models.CharField(choices=[('fixed', 'Fixed Amount'), ('percent', 'Percentage')], default='fixed', max_length=10)),
                ('image', models.ImageField(blank=True, null=True, upload_to='option_values/')),
                ('color_code', models.CharField(blank=True, help_text='Hex color code for visual representation', max_length=7)),
                ('specifications', models.JSONField(default=dict, help_text='Technical specifications (GSM, dimensions, etc.)')),
                ('is_default', models.BooleanField(default=False)),
                ('is_active', models.BooleanField(default=True)),
                ('sort_order', models.IntegerField(default=0)),
                ('stock_quantity', models.IntegerField(blank=True, help_text='Stock quantity (null = unlimited)', null=True)),
                ('lead_time_days', models.IntegerField(default=0, help_text='Additional lead time for this option')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('option', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='values', to='products.productoption')),
            ],
            options={
                'ordering': ['sort_order', 'name'],
            },
        ),
        
        # Create new ProductVariant model
        migrations.CreateModel(
            name='ProductVariant',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('sku', models.CharField(max_length=50, unique=True)),
                ('width', models.DecimalField(decimal_places=2, help_text='Width in mm', max_digits=8)),
                ('height', models.DecimalField(decimal_places=2, help_text='Height in mm', max_digits=8)),
                ('depth', models.DecimalField(blank=True, decimal_places=2, help_text='Depth in mm (for 3D products)', max_digits=8, null=True)),
                ('unit', models.CharField(choices=[('mm', 'MM'), ('in', 'Inches'), ('cm', 'CM')], default='mm', max_length=10)),
                ('price_modifier', models.DecimalField(decimal_places=2, default=0, max_digits=8)),
                ('price_modifier_type', models.CharField(choices=[('fixed', 'Fixed Amount'), ('percent', 'Percentage')], default='fixed', max_length=10)),
                ('bleed', models.DecimalField(blank=True, decimal_places=2, help_text='Bleed in mm (overrides product default)', max_digits=5, null=True)),
                ('safe_zone', models.DecimalField(blank=True, decimal_places=2, help_text='Safe zone in mm (overrides product default)', max_digits=5, null=True)),
                ('stock_quantity', models.IntegerField(blank=True, help_text='Stock quantity (null = unlimited)', null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('sort_order', models.IntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='variants', to='products.product')),
            ],
            options={
                'ordering': ['sort_order', 'name'],
            },
        ),
        
        # Create new PricingRule model
        migrations.CreateModel(
            name='PricingRule',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('rule_type', models.CharField(choices=[('base', 'Base Price'), ('quantity', 'Quantity Break'), ('option', 'Option Surcharge'), ('regional', 'Regional Pricing'), ('bulk', 'Bulk Discount'), ('seasonal', 'Seasonal Pricing'), ('customer_tier', 'Customer Tier Pricing')], max_length=20)),
                ('description', models.TextField(blank=True)),
                ('min_quantity', models.IntegerField(blank=True, null=True)),
                ('max_quantity', models.IntegerField(blank=True, null=True)),
                ('required_options', models.JSONField(default=dict, help_text='Required option combinations')),
                ('customer_groups', models.JSONField(default=list, help_text='Applicable customer groups')),
                ('valid_from', models.DateTimeField(blank=True, null=True)),
                ('valid_until', models.DateTimeField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('priority', models.IntegerField(default=0, help_text='Higher priority rules are applied first')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='pricing_rules', to='products.product')),
            ],
            options={
                'ordering': ['-priority', 'name'],
            },
        ),
        
        # Create new PricingTier model
        migrations.CreateModel(
            name='PricingTier',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('min_quantity', models.IntegerField()),
                ('max_quantity', models.IntegerField(blank=True, help_text='Leave blank for unlimited', null=True)),
                ('unit_price', models.DecimalField(blank=True, decimal_places=4, max_digits=10, null=True)),
                ('price_modifier', models.DecimalField(decimal_places=2, default=0, max_digits=8)),
                ('price_modifier_type', models.CharField(choices=[('fixed', 'Fixed Amount'), ('percent', 'Percentage'), ('discount_percent', 'Discount Percentage')], default='fixed', max_length=20)),
                ('setup_fee', models.DecimalField(decimal_places=2, default=0, max_digits=8)),
                ('shipping_modifier', models.DecimalField(decimal_places=2, default=0, max_digits=8)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('pricing_rule', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tiers', to='products.pricingrule')),
            ],
            options={
                'ordering': ['min_quantity'],
            },
        ),
        
        # Add unique constraints
        migrations.AddConstraint(
            model_name='productoption',
            constraint=models.UniqueConstraint(fields=['product', 'name'], name='unique_product_option'),
        ),
        migrations.AddConstraint(
            model_name='optionvalue',
            constraint=models.UniqueConstraint(fields=['option', 'name'], name='unique_option_value'),
        ),
        migrations.AddConstraint(
            model_name='productvariant',
            constraint=models.UniqueConstraint(fields=['product', 'name'], name='unique_product_variant'),
        ),
        migrations.AddConstraint(
            model_name='pricingtier',
            constraint=models.UniqueConstraint(fields=['pricing_rule', 'min_quantity'], name='unique_pricing_tier'),
        ),
        
        # Add indexes for performance
        migrations.AddIndex(
            model_name='product',
            index=models.Index(fields=['status', 'category'], name='products_product_status_category_idx'),
        ),
        migrations.AddIndex(
            model_name='product',
            index=models.Index(fields=['product_type', 'status'], name='products_product_type_status_idx'),
        ),
        migrations.AddIndex(
            model_name='product',
            index=models.Index(fields=['featured', 'bestseller'], name='products_product_featured_bestseller_idx'),
        ),
    ]
