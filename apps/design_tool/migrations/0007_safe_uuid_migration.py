# Generated by Django 4.2.7 - Safe UUID Migration
import uuid
from django.db import migrations, models


def preserve_and_fix_data(apps, schema_editor):
    """Safely handle UUID conflicts by preserving existing data"""
    try:
        DesignTemplate = apps.get_model('design_tool', 'DesignTemplate')
        UserDesign = apps.get_model('design_tool', 'UserDesign')

        # Check for any data that needs UUID regeneration
        templates_with_invalid_uuids = []
        designs_with_invalid_uuids = []

        # Identify templates that might have UUID issues
        for template in DesignTemplate.objects.all():
            try:
                # Validate UUID
                uuid.UUID(str(template.id))
            except (ValueError, TypeError):
                templates_with_invalid_uuids.append(template)

        # Identify user designs that might have UUID issues
        for design in UserDesign.objects.all():
            try:
                # Validate UUID
                uuid.UUID(str(design.id))
            except (ValueError, TypeError):
                designs_with_invalid_uuids.append(design)

        # Fix any invalid UUIDs by regenerating them
        for template in templates_with_invalid_uuids:
            template.id = uuid.uuid4()
            template.save()

        for design in designs_with_invalid_uuids:
            design.id = uuid.uuid4()
            design.save()

        print(f"Fixed {len(templates_with_invalid_uuids)} DesignTemplate UUIDs")
        print(f"Fixed {len(designs_with_invalid_uuids)} UserDesign UUIDs")

    except Exception as e:
        print(f"Error during UUID migration: {e}")
        # Don't fail the migration, just log the error
        pass


def reverse_preserve_and_fix_data(apps, schema_editor):
    """Reverse operation - no action needed"""
    pass


class Migration(migrations.Migration):

    dependencies = [
        ('design_tool', '0006_auto_20250914_1637'),
    ]

    operations = [
        # First ensure all required fields have proper defaults
        migrations.AlterField(
            model_name='designtemplate',
            name='template_file',
            field=models.FileField(
                blank=True,
                null=True,
                upload_to='templates/files/',
                help_text="SVG template file or JSON canvas data"
            ),
        ),
        migrations.AlterField(
            model_name='designtemplate',
            name='template_data',
            field=models.JSONField(
                blank=True,
                null=True,
                help_text="Parsed canvas data from SVG"
            ),
        ),
        # Run the data preservation function
        migrations.RunPython(preserve_and_fix_data, reverse_preserve_and_fix_data),
    ]